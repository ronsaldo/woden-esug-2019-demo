"!GPU"
| terrainFunction heightScale lighthousePosition lighthouseRadius |

heightScale := 1200.0.
lighthousePosition := (WMVector3F x: -1120.0 y: 110.0 z: 820.0).
lighthouseRadius := 15.0.

terrainFunction := [ :x :y |
	| p heightValue sand snow grass rock r theta	
	craterHeight craterDeepness craterRadius volcanoRadius islandRadius islandHeight seabedHeight inBorder
	cliffTheta cliffThetaCos cliffHeight
	lighthouseDistance
	snowHeight
	|
	"Compute the coordinates"
	p := x @ y.
	
	r := p radius.
	theta := p theta.
	
	craterDeepness := 400.0.
	craterRadius := 100.0.

	volcanoRadius := craterRadius*10.0.
	islandRadius := volcanoRadius + 300.0.
	islandHeight :=  (p * 0.0025 fbmSignedGradientNoiseOctaves: 4 lacunarity: 1.751) * 200.0 + 50.0.
	craterHeight :=  (p * 0.02 fbmSignedGradientNoiseOctaves: 5 lacunarity: 2.751) * 150.0 + 1000.0.
	seabedHeight := (p * 0.0035 fbmSignedGradientNoiseOctaves: 4 lacunarity: 2.1234) * 100.0 - 50.0.
	seabedHeight := seabedHeight + ((p * 0.000578 fbmSignedGradientNoiseAbsOctaves: 4 lacunarity: 7.1234) * -1000.0).
	
	r := r + ((theta*2.124) turbulence*27.0).
	
	heightValue := 0.0 interpolateTo: seabedHeight at: 1.0 - ((r - islandRadius) / -200.0) exp.

	cliffTheta := theta + 3.6.
	cliffThetaCos := cliffTheta cos.
	cliffHeight := (p * 0.0035 fbmSignedGradientNoiseOctaves: 4 lacunarity: 2.1234)*80.0 + 100.0.
	cliffHeight := cliffHeight * (cliffThetaCos smoothStepFrom: 0.70 to: 1.0).
	
	r < islandRadius ifTrue: [
		heightValue := islandHeight interpolateTo: 0.0
			at: (r smoothStepFrom: volcanoRadius to: islandRadius)
	].

	r < volcanoRadius ifTrue: [ 
		heightValue := craterHeight interpolateTo: islandHeight
			at: (r smoothStepFrom: craterRadius to: volcanoRadius)
	].

	r < craterRadius ifTrue: [ 
		heightValue := craterDeepness interpolateTo: craterHeight
			at: (r smoothStepFrom: 0.0 to: craterRadius).
	].

	"heightValue := heightValue +
		((p * 0.0013 fbmSignedGradientNoiseOctaves: 4 lacunarity: 2.351) * 100.0)."

	inBorder := (p x abs max: p y abs) smoothStepFrom: 4650.0 to: 5050.0.
	heightValue := heightValue interpolateTo:
		(p * 0.0007 fbmSignedGradientNoiseOctaves: 4 lacunarity: 2.654) * 700.0 + 350.0
		at: inBorder.

	(cliffHeight > 0.0 and: [r < (islandRadius + 200.0)]) ifTrue: [ 
		cliffHeight := cliffHeight interpolateTo: heightValue at:
			(r smoothStepFrom: islandRadius + 100.0 to: islandRadius + 200.0 ).

		heightValue := heightValue max: cliffHeight.
	].

	"Flatten the soil for the lighthouse"
	lighthouseDistance := (p - lighthousePosition xz) length.
	heightValue := lighthousePosition y interpolateTo: heightValue at:
		 (lighthouseDistance smoothStepFrom: lighthouseRadius to: lighthouseRadius + 4.0).
	
	snowHeight := (p * 0.018 fbmSignedGradientNoiseAbsOctaves: 3 lacunarity: 2.354)
		* ((p  * 0.0015 fbmSignedGradientNoiseOctaves: 3 lacunarity: 2.764)*0.5 + 0.5)*1000.0
		+ 250.0.
	snow := heightValue smoothStepFrom: snowHeight - 100.0 to: snowHeight + 100.0.

	grass := 
		((p * 1230.45 * (
			(p * 0.012345 fbmGradientNoiseOctaves: 4 lacunarity: 3.712)*0.8 + 0.2
		) fbmSignedGradientNoiseOctaves: 4 lacunarity: 2.312))
		"stepEdge: -0.0."
		smoothStepFrom: -0.2 to: 0.0.
	
	grass := grass * (heightValue smoothStepFrom: -300.0 to: 30.0).
	grass := grass * (1.0 - snow).
	"grass := 0.0."
	rock := (p * 101.12 fbmSignedGradientNoiseAbsOctaves: 4 lacunarity: 4.25) smoothStepFrom: 0.05 to: 0.07.
	sand := (p * 101.12 fbmSignedGradientNoiseOctaves: 4 lacunarity: 7.25) smoothStepFrom: -0.3 to: 0.0.
	rock := rock * (1.0 - (sand smoothStepFrom: 0.9 to: 1.0)).
	sand := sand * (1.0 - snow).
	"rock := 0.0."
	
	"rock := (1.0 - grass).
	sand := 0.0."


	{heightValue . {sand . grass . rock . snow . 0.0}}.
].

textureGenerator terrainData
	clipMapLevels: 3;
	minHeight: heightScale negated;
	maxHeight: heightScale;
	yourself.
^ textureGenerator
	textureExtent: 2048@2048 terrainCellSize: 5.0@5.0;
	terrainFunction: terrainFunction;
	evaluate
